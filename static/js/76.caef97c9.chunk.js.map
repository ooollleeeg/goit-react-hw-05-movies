{"version":3,"file":"static/js/76.caef97c9.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/movie-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castMember\":\"Cast_castMember__RY3Nk\",\"name\":\"Cast_name__6UbFm\",\"character\":\"Cast_character__tKDlA\",\"characterName\":\"Cast_characterName__R1bgC\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport movieAPI from 'services/movie-api';\nimport css from './Cast.module.css';\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState(null);\n    const [loading, setLoading] = useState(false);\n    \n    const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    useEffect(() => {\n        setLoading(true);\n        movieAPI\n            .fetchCast(movieId)\n            .then(result => setCast(result.cast))\n            .catch(error => toast.error(`${error.message}`))\n            .finally(() => { setLoading(false) });\n    }, [movieId]);\n\n    return (\n        <ul className={css.castList}>\n            {cast &&\n                cast.map(actor => {\n                    return (\n                        <li className={css.castMember} key={actor.cast_id}>\n                            {actor.profile_path\n                                ? <img\n                                    src={`${BASE_IMG_URL}${actor.profile_path}`}\n                                    alt=\"\"\n                                    width=\"180\"\n                                    className={css.photo}\n                                />\n                                : <img\n                                    src=\"https://dummyimage.com/500x750/C4F5C8/083004.jpg&text=No+Photo\"\n                                    alt=\"\"\n                                    width=\"180\"\n                                    className={css.photo}\n                                />}\n                            <div>\n                                <p className={css.name}>{actor.name}</p>\n                                <p className={css.character}>Character:</p>\n                                {actor.character\n                                    ? <p className={css.characterName}>{actor.character}</p>\n                                    : <p className={css.characterName}>cameo</p>\n                                }\n                            </div>\n                        </li>\n                    );\n                })\n            }\n            {loading && <Loader />}\n        </ul>\n    );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '69fc77f6620d7e54166b698911b2babb';\nconst TRENDING = '/trending/movie/day';\nconst MOVIE_DETAILS = '/movie';\nconst CAST = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nasync function fetchTrending() {\n    try {\n        const fetchUrl = `${ BASE_URL }${TRENDING}?api_key=${API_KEY}`;\n        const response = await axios.get(fetchUrl);\n\n        if (response) {\n            return response.data.results;\n        }\n\n        return Promise.reject(\n            new Error('Oops! Something went wrong...')\n        );\n    } catch (error) {\n        return error;\n    }\n};\n\nasync function fetchMovieDetails(id) {\n    try {\n        const fetchUrl = `${ BASE_URL }${MOVIE_DETAILS}/${id}?api_key=${API_KEY}`;\n        const response = await axios.get(fetchUrl);\n\n        if (response) {\n            return response.data;\n        }\n\n        return Promise.reject(\n            new Error('Oops! Something went wrong...')\n        );\n    } catch (error) {\n        return error;\n    }\n};\n\nasync function fetchCast(id) {\n    try {\n        const fetchUrl = `${ BASE_URL }${MOVIE_DETAILS}/${id}${CAST}?api_key=${API_KEY}`;\n        const response = await axios.get(fetchUrl);\n\n        if (response) {\n            return response.data;\n        }\n\n        return Promise.reject(\n            new Error('Oops! Something went wrong...')\n        );\n    } catch (error) {\n        return error;\n    }\n};\n\nasync function fetchReviews(id) {\n    try {\n        const fetchUrl = `${ BASE_URL }${MOVIE_DETAILS}/${id}${REVIEWS}?api_key=${API_KEY}`;\n        const response = await axios.get(fetchUrl);\n\n        if (response) {\n            return response.data;\n        }\n\n        return Promise.reject(\n            new Error('Oops! Something went wrong...')\n        );\n    } catch (error) {\n        return error;\n    }\n};\n\nasync function searchMovies(query) {\n    try {\n        const fetchUrl = `${ BASE_URL }${SEARCH}?api_key=${API_KEY}&query=${query}`;\n        const response = await axios.get(fetchUrl);\n\n        if (response) {\n            return response.data;\n        }\n\n        return Promise.reject(\n            new Error('Oops! Something went wrong...')\n        );\n    } catch (error) {\n        return error;\n    }\n}\n\nconst movieAPI = {\n    fetchTrending,\n    fetchMovieDetails,\n    fetchCast,\n    fetchReviews,\n    searchMovies,\n};\n\nexport default movieAPI;"],"names":["movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","movieAPI","then","result","catch","error","toast","message","finally","className","css","map","actor","profile_path","src","alt","width","name","character","cast_id","Loader","BASE_URL","API_KEY","TRENDING","MOVIE_DETAILS","CAST","REVIEWS","SEARCH","fetchTrending","fetchUrl","axios","response","data","results","Promise","reject","Error","fetchMovieDetails","id","fetchCast","fetchReviews","searchMovies","query"],"sourceRoot":""}